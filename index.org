#+SEQ_TODO:       TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:           write(w) update(u) fix(f) verify(v) noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+TITLE:          thi.ng/macromath
#+AUTHOR:         Karsten Schmidt
#+EMAIL:          k@thi.ng
#+LANGUAGE:       en
#+OPTIONS:        toc:3 h:4 html-postamble:auto html-preamble:t tex:t
#+HTML_CONTAINER: div
#+HTML_DOCTYPE:   <!DOCTYPE html5>
#+HTML_HEAD:      <link href="http://fonts.googleapis.com/css?family=Droid+Sans:400,700" rel="stylesheet" type="text/css">
#+HTML_HEAD:      <link href="css/main.css" rel="stylesheet" type="text/css" />

* About the project
** Injected properties                                             :noexport:
#+BEGIN_SRC clojure :exports none :noweb-ref version
0.3.0-SNAPSHOT
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref project-url
https://github.com/thi-ng/macromath
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-source-path
target/classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-test-path
target/test-classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/macromath-<<version>>.js
#+END_SRC

** Description

A small library providing basic math expressions as macros to produce
inline expanded, nested expressions to create more legible source code
for involved maths and to avoid extraneous =reduce= calls caused by
the higher arity versions of Clojure's built-in maths functions.

The macros are useful to simplify code for many geometry & matrix
operations and are defined for both Clojure & ClojureScript.

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.6.0-beta2"]
#+END_SRC
**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "0.0-2173"]
#+END_SRC
*** Development
**** [[https://github.com/cemerick/austin][Austin]]
#+BEGIN_SRC clojure :noweb-ref dep-austin
[com.cemerick/austin "0.1.4"]
#+END_SRC
**** [[https://github.com/lynaghk/cljx][Cljx]]
#+BEGIN_SRC clojure :noweb-ref dep-cljx
[org.clojars.cemerick/cljx "0.5.0-SNAPSHOT"]
#+END_SRC
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.1"]
#+END_SRC
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.2.2"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.0.2"]
#+END_SRC

** Contributors

   | *Name*          | *Role*                          | *Website*                  |
   |-----------------+---------------------------------+----------------------------|
   | Karsten Schmidt | initiator & principal developer | http://postspectacular.com |

** Release history

   | *Version* | *Released* | *Description*                                                   | *Tagged Github URL* |
   |-----------+------------+-----------------------------------------------------------------+---------------------|
   |     0.2.1 | 2014-03-10 | Added bitmask macro & tests                                     | [[https://github.com/thi-ng/macromath/tree/0.2.1][0.2.1]]               |
   |     0.2.0 | 2014-02-27 | Removed need for special CLJS macros and adding more operations | [[https://github.com/thi-ng/macromath/tree/0.2.0][0.2.0]]               |
   |     0.1.0 | 2014-02-25 | Initial release                                                 | [[https://github.com/thi-ng/macromath/tree/0.1.0][0.1.0]]               |

** Leiningen coordinates
#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/macromath <<version>>]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code in CLJX form. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  cd macromath # project root
  ./tangle *.org test/*.org
#+END_SRC

Once tangling is complete, you can =cd= into the generated project
directory and then use =lein= as usual. The =project.clj= file defines
an alias to trigger a complete build & tests for both CLJ & CLJS
versions.

#+BEGIN_SRC bash
  cd babel # generated project root
  lein cleantest
#+END_SRC

** Leiningen project file                                          :noexport:
#+BEGIN_SRC clojure :tangle babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/macromath "<<version>>"
    :description  "Collection of common math macros to produce inline expanded, nested expressions."
    :url          "<<project-url>>"
    :license      {:name "Apache Software License 2.0"
                   :url "https://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url "git@github.com:thi-ng/macromath.git"}

    :min-lein-vesion "2.4.0"

    :dependencies [<<dep-clj>>]

    :source-paths ["src/cljx"]
    :test-paths   ["<<gen-test-path>>"]

    :profiles     {:dev {:dependencies [<<dep-cljs>>
                                        <<dep-criterium>>]
                         :plugins [<<dep-cljx>>
                                   <<dep-cljsbuild>>
                                   <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :auto-clean false
                         :prep-tasks [["cljx" "once"] "javac" "compile"]
                         :aliases {"cleantest" ["do" "clean" ["test" ":all"] ["cljsbuild" "test"]]}}}

    :cljx         {:builds [{:source-paths ["src/cljx"]
                             :output-path "<<gen-source-path>>"
                             :rules :clj}
                            {:source-paths ["src/cljx"]
                             :output-path "<<gen-source-path>>"
                             :rules :cljs}
                            {:source-paths ["test/cljx"]
                             :output-path "<<gen-test-path>>"
                             :rules :clj}
                            {:source-paths ["test/cljx"]
                             :output-path "<<gen-test-path>>"
                             :rules :cljs}]}

    :cljsbuild    {:builds [{:source-paths ["<<gen-source-path>>" "<<gen-test-path>>"]
                             :id "simple"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://thi.ng"]
                                [:timezone "0"]]])
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.macromath.version= contains a
single symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use 'thi.ng.macromath.version)
  
  (prn version)
  ; "<<version>>"
#+END_SRC
*** Version namespace                                              :noexport:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/macromath/version.cljx :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.macromath.version)
  (def version "<<version>>")
#+END_SRC

* Modules
** thi.ng.macromath.core

This library only contains this single name space. Though because the
ns contains macros, importing it into a user ns will require a similar
approach as this one:

#+BEGIN_SRC clojure
  (ns user
    #+clj (:require [thi.ng.macromath.core :as m])
    #+cljs (:require-macros [thi.ng.macromath.core :as m]))
#+END_SRC

The following maths functions are currently implemented and are
especially useful (more legible and faster) for higher arities (up to 8):

  | *fn*      | *description*                                              | *min arity* | *max arity* |
  |-----------+------------------------------------------------------------+-------------+-------------|
  | =add=     | like clj =+=                                               |           2 |           8 |
  | =sub=     | like clj =-=                                               |           2 |           8 |
  | =mul=     | like clj =*=                                               |           2 |           8 |
  | =div=     | like clj =/=                                               |           2 |           8 |
  | =madd=    | add pairwise multiplies                                    |           3 |           8 |
  | =msub=    | subtract pairwise multiplies                               |           3 |           8 |
  | =addm=    | product of pairwise sums                                   |           3 |           8 |
  | =subm=    | product of pairwise subtracts                              |           3 |           8 |
  | =adddiv=  | division of pairwise sums                                  |           3 |           8 |
  | =subdiv=  | division of pairwise subtracts                             |           3 |           8 |
  | =maddsub= | like =madd=, but last arg or pair is subtracted as product |           4 |           8 |
  | =addmsub= | like =addm=, but last arg or pair is subtracted as product |           4 |           8 |
  | =msubadd= | like =msub=, but last arg or pair is added as product      |           4 |           8 |
  | =submadd= | like =subm=, but last arg or pair is added as product      |           4 |           8 |

*** Expression macro builders
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/macromath/core.clj :mkdirp yes :padline no
  (ns thi.ng.macromath.core)
  
  (defmacro defmathop
    "Constructs macro to build inlined nested expressions which when
    call will apply f successively to all args. Supports arities 2-8."
    [name f]
    `(defmacro ~name
       ([a# b#]
          `(~~f ~a# ~b#))
       ([a# b# c#]
          `(~~f (~~f ~a# ~b#) ~c#))
       ([a# b# c# d#]
          `(~~f (~~f (~~f ~a# ~b#) ~c#) ~d#))
       ([a# b# c# d# e#]
          `(~~f (~~f (~~f (~~f ~a# ~b#) ~c#) ~d#) ~e#))
       ([a# b# c# d# e# f#]
          `(~~f (~~f (~~f (~~f (~~f ~a# ~b#) ~c#) ~d#) ~e#) ~f#))
       ([a# b# c# d# e# f# g#]
          `(~~f (~~f (~~f (~~f (~~f (~~f ~a# ~b#) ~c#) ~d#) ~e#) ~f#) ~g#))
       ([a# b# c# d# e# f# g# h#]
          `(~~f (~~f (~~f (~~f (~~f (~~f (~~f ~a# ~b#) ~c#) ~d#) ~e#) ~f#) ~g#) ~h#))))
  
  (defmacro defmathop2
    "Constructs macro to build inlined nested expressions which when
    call will apply f to inner pairs and f2 to combine results."
    [name f f2]
    `(defmacro ~name
       ([a# b# c#]
          `(~~f2 (~~f ~a# ~b#) ~c#))
       ([a# b# c# d#]
          `(~~f2 (~~f ~a# ~b#) (~~f ~c# ~d#)))
       ([a# b# c# d# e#]
          `(~~f2 (~~f2 (~~f ~a# ~b#) (~~f ~c# ~d#)) ~e#))
       ([a# b# c# d# e# f#]
          `(~~f2 (~~f2 (~~f ~a# ~b#) (~~f ~c# ~d#)) (~~f ~e# ~f#)))
       ([a# b# c# d# e# f# g#]
          `(~~f2 (~~f2 (~~f2 (~~f ~a# ~b#) (~~f ~c# ~d#)) (~~f ~e# ~f#)) ~g#))
       ([a# b# c# d# e# f# g# h#]
          `(~~f2 (~~f2 (~~f2 (~~f ~a# ~b#) (~~f ~c# ~d#)) (~~f ~e# ~f#)) (~~f ~g# ~h#)))))
  
  (defmacro defmathop3
    "Takes f, f2 & f3 as syntax-quoted symbols. Constructs a macro which
    when called, applies f to all but the last 1 or 2 args. The
    remaining arg(s) are combined with the first result using f2.
    Furthermore, for arities 6 and 8, f3 is first applied to the last
    two args are before the final application of f2. For example:
  
        (defmathop* maddsub `madd `- `*)
        (maddsub 2 3 4 5) => (- (madd 2 3 4) 5)
        (maddsub 2 3 4 5 6) => (- (madd 2 3 4) (* 5 6))"
    [name f f2 f3]
    `(defmacro ~name
       ([a# b# c# d#]
          `(~~f2 (~~f ~a# ~b# ~c#) ~d#))
       ([a# b# c# d# e#]
          `(~~f2 (~~f ~a# ~b# ~c# ~d#) ~e#))
       ([a# b# c# d# e# f#]
          `(~~f2 (~~f ~a# ~b# ~c# ~d#) (~~f3 ~e# ~f#)))
       ([a# b# c# d# e# f# g#]
          `(~~f2 (~~f ~a# ~b# ~c# ~d# ~e# ~f#) ~g#))
       ([a# b# c# d# e# f# g# h#]
          `(~~f2 (~~f ~a# ~b# ~c# ~d# ~e# ~f#) (~~f3 ~g# ~h#)))))
#+END_SRC
*** Actual definition of maths operations
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/macromath/core.clj
  (defmathop add `+)
  (defmathop sub `-)
  (defmathop mul `*)
  (defmathop div `/)
  (defmathop2 madd `* `+)
  (defmathop2 msub `* `-)
  (defmathop2 addm `+ `*)
  (defmathop2 subm `- `*)
  (defmathop2 adddiv `+ `/)
  (defmathop2 subdiv `- `/)
  (defmathop3 maddsub `madd `- `*)
  (defmathop3 addmsub `addm `- `*)
  (defmathop3 msubadd `msub `+ `*)
  (defmathop3 submadd `subm `+ `*)
#+END_SRC
*** Binary operations
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/macromath/core.clj
  (defmacro if*
    "Returns y if x > 0, else 0"
    [pred x y] `(if (~pred ~x) ~y 0))
  
  (defmacro bitmask
    "Constructs a bit mask from given values & predicate fn applied to
    each. If pred returns truthy value the value's related bit is set.
    Bit values start at 1 and double for successive args (max 8)."
    ([pred a]
       `(if* ~pred ~a 0x01))
    ([pred a b]
       `(bit-or (bitmask ~pred ~a) (if* ~pred ~b 0x02)))
    ([pred a b c]
       `(bit-or (bitmask ~pred ~a ~b) (if* ~pred ~c 0x04)))
    ([pred a b c d]
       `(bit-or (bitmask ~pred ~a ~b ~c) (if* ~pred ~d 0x08)))
    ([pred a b c d e]
       `(bit-or (bitmask ~pred ~a ~b ~c ~d) (if* ~pred ~e 0x10)))
    ([pred a b c d e f]
       `(bit-or (bitmask ~pred ~a ~b ~c ~d ~e) (if* ~pred ~f 0x20)))
    ([pred a b c d e f g]
       `(bit-or (bitmask ~pred ~a ~b ~c ~d ~e ~f) (if* ~pred ~g 0x40)))
    ([pred a b c d e f g h]
       `(bit-or (bitmask ~pred ~a ~b ~c ~d ~e ~f ~g) (if* ~pred ~h 0x80))))
#+END_SRC
*** Interpolation
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/macromath/core.clj
  (defmacro mix
    "Linear, bi-linear & tri-linear interpolation"
    ([a b t] `(let [a# ~a] (submadd ~b a# ~t a#)))
    ([a b c d u v] `(mix (mix ~a ~b ~u) (mix ~c ~d ~u) ~v))
    ([a b c d e f g h u v w] `(mix (mix ~a ~b ~c ~d ~u ~v) (mix ~e ~f ~g ~h ~u ~v) ~w)))
#+END_SRC

* Tests
** thi.ng.macromath.test.core
*** Namespace declaration
#+BEGIN_SRC clojure :tangle babel/test/cljx/thi/ng/macromath/test/core.cljx :mkdirp yes :padline no
  (ns thi.ng.macromath.test.core
    (:require
     ,#+clj  [clojure.test :refer :all]
     ,#+cljs [cemerick.cljs.test :as t]
     ,#+clj  [thi.ng.macromath.core :as m])
    ,#+cljs
    (:require-macros
     [cemerick.cljs.test :refer [is deftest]]
     [thi.ng.macromath.core :as m]))
#+END_SRC
*** Math ops
#+BEGIN_SRC clojure :tangle babel/test/cljx/thi/ng/macromath/test/core.cljx
  (deftest test-add
    (is (== 5 (m/add 2.0 3.0)))
    (is (== 9 (m/add 2.0 3.0 4.0)))
    (is (== 14 (m/add 2.0 3.0 4.0 5.0)))
    (is (== 20 (m/add 2.0 3.0 4.0 5.0 6.0)))
    (is (== 27 (m/add 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 35 (m/add 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 44 (m/add 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-sub
    (is (== -1 (m/sub 2.0 3.0)))
    (is (== -5 (m/sub 2.0 3.0 4.0)))
    (is (== -10 (m/sub 2.0 3.0 4.0 5.0)))
    (is (== -16 (m/sub 2.0 3.0 4.0 5.0 6.0)))
    (is (== -23 (m/sub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -31 (m/sub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== -40 (m/sub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-mul
    (is (== 6 (m/mul 2.0 3.0)))
    (is (== 24 (m/mul 2.0 3.0 4.0)))
    (is (== 120 (m/mul 2.0 3.0 4.0 5.0)))
    (is (== 720 (m/mul 2.0 3.0 4.0 5.0 6.0)))
    (is (== 5040 (m/mul 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 40320 (m/mul 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 362880 (m/mul 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-div
    (is (== (/ 2.0 3.0) (m/div 2.0 3.0)))
    (is (== (/ 2.0 3.0 4.0) (m/div 2.0 3.0 4.0)))
    (is (== (/ 2.0 3.0 4.0 5.0) (m/div 2.0 3.0 4.0 5.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0) (m/div 2.0 3.0 4.0 5.0 6.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0 7.0) (m/div 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0 7.0 8.0) (m/div 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0) (m/div 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-madd
    (is (== 10 (m/madd 2.0 3.0 4.0)))
    (is (== 26 (m/madd 2.0 3.0 4.0 5.0)))
    (is (== 32 (m/madd 2.0 3.0 4.0 5.0 6.0)))
    (is (== 68 (m/madd 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 76 (m/madd 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 140 (m/madd 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-msub
    (is (== 2 (m/msub 2.0 3.0 4.0)))
    (is (== -14 (m/msub 2.0 3.0 4.0 5.0)))
    (is (== -20 (m/msub 2.0 3.0 4.0 5.0 6.0)))
    (is (== -56 (m/msub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -64 (m/msub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== -128 (m/msub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-addm
    (is (== 20 (m/addm 2.0 3.0 4.0)))
    (is (== 45 (m/addm 2.0 3.0 4.0 5.0)))
    (is (== 270 (m/addm 2.0 3.0 4.0 5.0 6.0)))
    (is (== 585 (m/addm 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 4680 (m/addm 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 9945 (m/addm 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-adddiv
    (is (== (/ 5.0 4.0) (m/adddiv 2.0 3.0 4.0)))
    (is (== (/ 5.0 9.0) (m/adddiv 2.0 3.0 4.0 5.0)))
    (is (== (/ 5.0 9.0 6.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0)))
    (is (== (/ 5.0 9.0 13.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== (/ 5.0 9.0 13.0 8.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== (/ 5.0 9.0 13.0 17.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-subm
    (is (== -4 (m/subm 2.0 3.0 4.0)))
    (is (== 1 (m/subm 2.0 3.0 4.0 5.0)))
    (is (== 6 (m/subm 2.0 3.0 4.0 5.0 6.0)))
    (is (== -1 (m/subm 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -8 (m/subm 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 1 (m/subm 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-subdiv
    (is (== (/ -1.0 4.0) (m/subdiv 2.0 3.0 4.0)))
    (is (== (/ -1.0 -1.0) (m/subdiv 2.0 3.0 4.0 5.0)))
    (is (== (/ -1.0 -1.0 6.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0)))
    (is (== (/ -1.0 -1.0 -1.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== (/ -1.0 -1.0 -1.0 8.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== (/ -1.0 -1.0 -1.0 -1.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-maddsub
    (is (== 5 (m/maddsub 2.0 3.0 4.0 5.0)))
    (is (== 20 (m/maddsub 2.0 3.0 4.0 5.0 6.0)))
    (is (== -16 (m/maddsub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 60 (m/maddsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== -4 (m/maddsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-msubadd
    (is (== 7 (m/msubadd 2.0 3.0 4.0 5.0)))
    (is (== -8 (m/msubadd 2.0 3.0 4.0 5.0 6.0)))
    (is (== 28 (m/msubadd 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -48 (m/msubadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 16 (m/msubadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-addmsub
    (is (== 15 (m/addmsub 2.0 3.0 4.0 5.0)))
    (is (== 39 (m/addmsub 2.0 3.0 4.0 5.0 6.0)))
    (is (== 3 (m/addmsub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 577 (m/addmsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 513 (m/addmsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-submadd
    (is (== 1 (m/submadd 2.0 3.0 4.0 5.0)))
    (is (== 7 (m/submadd 2.0 3.0 4.0 5.0 6.0)))
    (is (== 43 (m/submadd 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 7 (m/submadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 71 (m/submadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
#+END_SRC
*** Binary ops
#+BEGIN_SRC clojure :tangle babel/test/cljx/thi/ng/macromath/test/core.cljx
  (deftest bitmask
    (is (= 0x01 (m/bitmask pos? 1)))
    (is (= 0x03 (m/bitmask pos? 1 1)))
    (is (= 0x07 (m/bitmask pos? 1 1 1)))
    (is (= 0x0f (m/bitmask pos? 1 1 1 1)))
    (is (= 0x1f (m/bitmask pos? 1 1 1 1 1)))
    (is (= 0x3f (m/bitmask pos? 1 1 1 1 1 1)))
    (is (= 0x7f (m/bitmask pos? 1 1 1 1 1 1 1)))
    (is (= 0xff (m/bitmask pos? 1 1 1 1 1 1 1 1)))
    (is (= 0x55 (m/bitmask pos? 1 0 1 0 1 0 1 0)))
    (is (= 0xaa (m/bitmask pos? 0 1 0 1 0 1 0 1))))
#+END_SRC
*** Interpolation
#+BEGIN_SRC clojure :tangle babel/test/cljx/thi/ng/macromath/test/core.cljx
  (deftest mix
    (is (= 0.5  (m/mix 0 1 0.5)))
    (is (= 1.5  (m/mix 0 1 2 3 0.5 0.5)))
    (is (= 3.5  (m/mix 0 1 2 3 4 5 6 7 0.5 0.5 0.5))))
#+END_SRC
